"use strict";(self.webpackChunkreact_native_reanimated=self.webpackChunkreact_native_reanimated||[]).push([[4450],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),f=o,m=d["".concat(c,".").concat(f)]||d[f]||s[f]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2334:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return s},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return p}});var r=n(3117),o=(n(7294),n(3905));const a={},i=void 0,l={unversionedId:"nodes/color",id:"version-1.x.x/nodes/color",title:"color",description:"color",source:"@site/versioned_docs/version-1.x.x/nodes/color.md",sourceDirName:"nodes",slug:"/nodes/color",permalink:"/react-native-reanimated/docs/1.x.x/nodes/color",draft:!1,tags:[],version:"1.x.x",frontMatter:{},sidebar:"version-1.x.x/docs",previous:{title:"call",permalink:"/react-native-reanimated/docs/1.x.x/nodes/call"},next:{title:"concat",permalink:"/react-native-reanimated/docs/1.x.x/nodes/concat"}},c={},p=[{value:"<code>color</code>",id:"color",level:2},{value:"Note: In order to interpolate color output values, use <code>interpolateColors</code> instead.",id:"note-in-order-to-interpolate-color-output-values-use-interpolatecolors-instead",level:5}],u={toc:p};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"color"},(0,o.kt)("inlineCode",{parentName:"h2"},"color")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"color(red, green, blue, alpha);\n")),(0,o.kt)("p",null,"Creates a color node in RGBA format, where the first three input nodes should have ",(0,o.kt)("em",{parentName:"p"},"integer")," values in the range 0-255 (consider using ",(0,o.kt)("inlineCode",{parentName:"p"},"round")," node if needed) and correspond to color components Red, Green and Blue respectively. Last input node should have a value between 0 and 1 and represents alpha channel (value ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," means fully opaque and ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," completely transparent). Alpha parameter can be ommited, then ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," (fully opaque) is used as a default."),(0,o.kt)("p",null,"The returned node can be mapped to view properties that represents color (e.g. ",(0,o.kt)("a",{parentName:"p",href:"https://facebook.github.io/react-native/docs/view-style-props.html#backgroundcolor"},(0,o.kt)("inlineCode",{parentName:"a"},"backgroundColor")),")."),(0,o.kt)("h5",{id:"note-in-order-to-interpolate-color-output-values-use-interpolatecolors-instead"},"Note: In order to interpolate color output values, use ",(0,o.kt)("a",{parentName:"h5",href:"/react-native-reanimated/docs/1.x.x/nodes/interpolateColors"},(0,o.kt)("inlineCode",{parentName:"a"},"interpolateColors"))," instead."))}s.isMDXComponent=!0}}]);