"use strict";(self.webpackChunkreact_native_reanimated=self.webpackChunkreact_native_reanimated||[]).push([[8113],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5759:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l}});var r=n(3117),a=(n(7294),n(3905));const i={id:"spring",title:"Spring",sidebar_label:"Spring"},o=void 0,s={unversionedId:"animations/spring",id:"version-1.x.x/animations/spring",title:"Spring",description:"When evaluated, updates position and velocity nodes by running a single step of spring based animation. Check the original Animated API docs to learn about the config parameters like damping, mass, stiffness, overshootClamping, restSpeedThreshold and restDisplacementThreshold. The finished state updates to 1 when the position reaches the destination set by toValue. The time state variable also updates when the node evaluates and it represents the clock value at the time when the node got evaluated for the last time. It is expected that time variable is reset before spring animation can be restarted.",source:"@site/versioned_docs/version-1.x.x/animations/spring.md",sourceDirName:"animations",slug:"/animations/spring",permalink:"/react-native-reanimated/docs/1.x.x/animations/spring",draft:!1,tags:[],version:"1.x.x",frontMatter:{id:"spring",title:"Spring",sidebar_label:"Spring"},sidebar:"version-1.x.x/docs",previous:{title:"Decay",permalink:"/react-native-reanimated/docs/1.x.x/animations/decay"},next:{title:"SpringUtils",permalink:"/react-native-reanimated/docs/1.x.x/animations/spring_utils"}},p={},l=[],c={toc:l};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"spring(\n  clock,\n  { finished, position, velocity, time },\n  {\n    damping,\n    mass,\n    stiffness,\n    overshootClamping,\n    restSpeedThreshold,\n    restDisplacementThreshold,\n    toValue,\n  }\n);\n")),(0,a.kt)("p",null,"When evaluated, updates ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"velocity")," nodes by running a single step of spring based animation. Check the original ",(0,a.kt)("inlineCode",{parentName:"p"},"Animated")," API docs to learn about the config parameters like ",(0,a.kt)("inlineCode",{parentName:"p"},"damping"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"mass"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"stiffness"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"overshootClamping"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"restSpeedThreshold")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"restDisplacementThreshold"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"finished")," state updates to ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," when the ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," reaches the destination set by ",(0,a.kt)("inlineCode",{parentName:"p"},"toValue"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"time")," state variable also updates when the node evaluates and it represents the clock value at the time when the node got evaluated for the last time. It is expected that ",(0,a.kt)("inlineCode",{parentName:"p"},"time")," variable is reset before spring animation can be restarted."))}d.isMDXComponent=!0}}]);