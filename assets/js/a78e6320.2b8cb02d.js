"use strict";(self.webpackChunkreact_native_reanimated=self.webpackChunkreact_native_reanimated||[]).push([[6309],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),c=u(t),m=r,y=c["".concat(l,".").concat(m)]||c[m]||p[m]||o;return t?a.createElement(y,i(i({ref:n},s),{},{components:t})):a.createElement(y,i({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=c;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:r,i[1]=d;for(var u=2;u<o;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7400:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return u}});var a=t(3117),r=(t(7294),t(3905));const o={id:"useAnimatedKeyboard",title:"useAnimatedKeyboard",sidebar_label:"useAnimatedKeyboard"},i=void 0,d={unversionedId:"api/hooks/useAnimatedKeyboard",id:"api/hooks/useAnimatedKeyboard",title:"useAnimatedKeyboard",description:"Android implementation of useAnimatedKeyboard is an experimental feature.",source:"@site/docs/api/hooks/useAnimatedKeyboard.md",sourceDirName:"api/hooks",slug:"/api/hooks/useAnimatedKeyboard",permalink:"/react-native-reanimated/docs/next/api/hooks/useAnimatedKeyboard",draft:!1,tags:[],version:"current",frontMatter:{id:"useAnimatedKeyboard",title:"useAnimatedKeyboard",sidebar_label:"useAnimatedKeyboard"}},l={},u=[{value:"Returns",id:"returns",level:3},{value:"Types",id:"types",level:3},{value:"<code>AnimatedKeyboardInfo: [object]</code>",id:"animatedkeyboardinfo-object",level:4},{value:"Example",id:"example",level:3}],s={toc:u};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Android implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," is an experimental feature.")),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," hook, you can create animations based on current keyboard position."),(0,r.kt)("p",null,"On Android, make sure to set ",(0,r.kt)("inlineCode",{parentName:"p"},"android:windowSoftInputMode")," in your ",(0,r.kt)("inlineCode",{parentName:"p"},"AndroidMainfest.xml")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"adjustResize"),". Then, using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," hook disables\nthe default Android behavior (resizing the view to accomodate keyboard) in the whole app. Using values from ",(0,r.kt)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," hook you can handle the keyboard yourself. Unmounting all components that use ",(0,r.kt)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," hook brings back the default Android behavior."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"useAnimatedKeyboard() -> [AnimatedKeyboardInfo]\n")),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("p",null,"Hook ",(0,r.kt)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," returns an instance of [",(0,r.kt)("a",{parentName:"p",href:"#animatedkeyboard-object"},"AnimatedKeyboardInfo"),"];"),(0,r.kt)("h3",{id:"types"},"Types"),(0,r.kt)("h4",{id:"animatedkeyboardinfo-object"},(0,r.kt)("inlineCode",{parentName:"h4"},"AnimatedKeyboardInfo: [object]")),(0,r.kt)("p",null,"Properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"height"),": [",(0,r.kt)("a",{parentName:"li",href:"../../api/hooks/useSharedValue"},"SharedValue"),"] contains ",(0,r.kt)("inlineCode",{parentName:"li"},"[number]"),"\ncontains current height of the keyboard"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"state"),": [",(0,r.kt)("a",{parentName:"li",href:"../../api/hooks/useSharedValue"},"SharedValue"),"] contains ",(0,r.kt)("inlineCode",{parentName:"li"},"[enum]"),"\ncontains current state of the keyboard. Possible states: ",(0,r.kt)("inlineCode",{parentName:"li"},"{ CLOSED, OPEN, CLOSING, OPENING }"))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function AnimatedKeyboardExample() {\n  const keyboard = useAnimatedKeyboard();\n  const translateStyle = useAnimatedStyle(() => {\n    return {\n      transform: [{ translateY: -keyboard.height.value }],\n    };\n  });\n\n  return (\n    <ScrollView contentContainerStyle={{flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Animated.View style={translateStyle}>\n        <TextInput />\n      </Animated.View>\n    </ScrollView>\n  );\n}\n")))}p.isMDXComponent=!0}}]);